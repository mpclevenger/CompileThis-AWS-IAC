AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  compilethis-site

  Sample SAM Template for compilethis-site

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  NewCTWebsite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ctwebsite11002
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: compilethis.io
      SubjectAlternativeNames:
        - www.compilethis.io
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: compilethis.io
          ValidationDomain: compilethis.io
        - DomainName: www.compilethis.io
          ValidationDomain: compilethis.io

  MySiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - compilethis.io
          - www.compilethis.io
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: S3WebsiteOrigin
          # Cache behavior
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          # End cache behavior
          ForwardedValues:
            QueryString: false
        Origins:
          - DomainName: !Sub "${NewCTWebsite}.s3-website-${AWS::Region}.amazonaws.com" 
            Id: S3WebsiteOrigin 
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        ViewerCertificate:
          AcmCertificateArn: "arn:aws:acm:us-east-1:480754951124:certificate/209f6720-4a20-444b-ac26-b28e3be2241a"
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  CTWebsitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NewCTWebsite
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${NewCTWebsite}/*"

  GetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: get-function/
      Handler: get-function
      Runtime: python3.13
      Architectures:
      - x86_64
      Events:
        GetFunctionEvents:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /get
            Method: get

  PutFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: put-function/
      Handler: put-function
      Runtime: python3.13
      Architectures:
      - x86_64
      Events:
        PutFunctionEvents:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /put
            Method: get


  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud-resume-challenge
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetFunctionApi:
    Description: API Gateway endpoint URL for Prod stage for GetFunction
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get"
  
  GetFunctionArn:
    Description: ARN of the GetFunction Lambda function
    Value: !GetAtt GetFunction.Arn

  GetFunctionIamRole:
    Description: Implicit IAM Role created for GetFunction
    Value: !GetAtt GetFunctionRole.Arn
  
  PutFunctionApi:
    Description: API Gateway endpoint URL for Prod stage for PutFunction
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/put"
  

  PutFunctionArn:
    Description: ARN of the PutFunction Lambda function
    Value: !GetAtt PutFunction.Arn

  PutFunctionIamRole:
    Description: Implicit IAM Role created for PutFunction
    Value: !GetAtt PutFunctionRole.Arn